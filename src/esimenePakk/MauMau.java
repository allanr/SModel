/*
 * generated by Fujaba - CodeGen2
 */
package esimenePakk;
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import java.util.*;
import de.upb.tools.fca.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.sdm.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath


public class MauMau
{



   public static final String PROPERTY_MAU_MAU = "MauMau";

   @Property( name = PROPERTY_MAU_MAU, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private static MauMau MauMau = new MauMau();

   @Property( name = PROPERTY_MAU_MAU )
   private static void setMauMau (MauMau value)
   {
      MauMau.MauMau = value;
   }


   @Property( name = PROPERTY_MAU_MAU )
   private static MauMau getMauMau ()
   {
      return MauMau.MauMau;
   }

   private  MauMau ()
   {
   }

   /**
    * <pre>
    *           0..1     is in     0..n
    * MauMau ------------------------- Card
    *           pile               card
    * </pre>
    */
   public static final String PROPERTY_CARD = "card";

   @Property( name = PROPERTY_CARD, partner = Card.PROPERTY_PILE, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashSet<Card> card;

   @Property( name = PROPERTY_CARD )
   public Set<? extends Card> getCard()
   {
      return ((this.card == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.card));
   }

   @Property( name = PROPERTY_CARD )
   public boolean addToCard (Card value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.card == null)
         {
            this.card = new FHashSet<Card> ();

         }
      
         changed = this.card.add (value);
         if (changed)
         {
            value.setPile (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CARD )
   public MauMau withCard (Card value)
   {
      addToCard (value);
      return this;
   }

   public MauMau withoutCard (Card value)
   {
      removeFromCard (value);
      return this;
   }


   public boolean removeFromCard (Card value)
   {
      boolean changed = false;

      if ((this.card != null) && (value != null))
      {
      
         changed = this.card.remove (value);
         if (changed)
         {
            value.setPile (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CARD )
   public void removeAllFromCard (){
   
      Card tmpValue;
      Iterator<? extends Card> iter = this.iteratorOfCard ();
      while (iter.hasNext ())
      {
         tmpValue = (Card) iter.next ();
         this.removeFromCard (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_CARD )
   public boolean hasInCard (Card value)
   {
      return ((this.card != null) &&
              (value != null) &&
              this.card.contains (value));
   }

   @Property( name = PROPERTY_CARD )
   public Iterator<? extends Card> iteratorOfCard ()
   {
      return ((this.card == null)
              ? FEmptyIterator.<Card>get ()
              : this.card.iterator ());
   }

   @Property( name = PROPERTY_CARD )
   public int sizeOfCard ()
   {
      return ((this.card == null)
              ? 0
              : this.card.size ());
   }

   public boolean dealCards (Player Dealer )
   {
      boolean fujaba__Success = false;
      int i = 0;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check object Dealer is really bound
         JavaSDM.ensure ( Dealer != null );
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( False )
      {
         return false;

      }
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check link taken from deck from Card to Card
         JavaSDM.ensure (Card.equals (Card.getCard ()));

         // destroy link taken from deck from Card to Card
         Card.setCard (null);
         // create link will be dealt from Card to Card
         Card.setCard (Card);

         // collabStat call
         for ( int i = 0;i <= n;++i )
         {
         i = i+1;
         }
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return true;
   }

   /**
    * <pre>
    *           0..1     has Deck of Cards     0..1
    * MauMau ------------------------- Deck
    *           mauMau               deck
    * </pre>
    */
   public static final String PROPERTY_DECK = "deck";

   @Property( name = PROPERTY_DECK, partner = Deck.PROPERTY_MAU_MAU, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Deck deck;

   @Property( name = PROPERTY_DECK )
   public boolean setDeck (Deck value)
   {
      boolean changed = false;

      if (this.deck != value)
      {
      
         Deck oldValue = this.deck;
         MauMau source = this;
         if (this.deck != null)
         {
            this.deck = null;
            oldValue.setMauMau (null);
         }
         this.deck = value;

         if (value != null)
         {
            value.setMauMau (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_DECK )
   public MauMau withDeck (Deck value)
   {
      setDeck (value);
      return this;
   }

   public Deck getDeck ()
   {
      return this.deck;
   }

   public static MauMau getInstance ()
   {

      return singleton;
   }

   /**
    * <pre>
    *           0..1     has     0..n
    * MauMau ------------------------- PlayerHand
    *           player               handOfPlayer
    * </pre>
    */
   public static final String PROPERTY_HAND_OF_PLAYER = "handOfPlayer";

   @Property( name = PROPERTY_HAND_OF_PLAYER, partner = PlayerHand.PROPERTY_PLAYER, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashSet<PlayerHand> handOfPlayer;

   @Property( name = PROPERTY_HAND_OF_PLAYER )
   public Set<? extends PlayerHand> getHandOfPlayer()
   {
      return ((this.handOfPlayer == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.handOfPlayer));
   }

   @Property( name = PROPERTY_HAND_OF_PLAYER )
   public boolean addToHandOfPlayer (PlayerHand value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.handOfPlayer == null)
         {
            this.handOfPlayer = new FHashSet<PlayerHand> ();

         }
      
         changed = this.handOfPlayer.add (value);
         if (changed)
         {
            value.setPlayer (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_HAND_OF_PLAYER )
   public MauMau withHandOfPlayer (PlayerHand value)
   {
      addToHandOfPlayer (value);
      return this;
   }

   public MauMau withoutHandOfPlayer (PlayerHand value)
   {
      removeFromHandOfPlayer (value);
      return this;
   }


   public boolean removeFromHandOfPlayer (PlayerHand value)
   {
      boolean changed = false;

      if ((this.handOfPlayer != null) && (value != null))
      {
      
         changed = this.handOfPlayer.remove (value);
         if (changed)
         {
            value.setPlayer (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_HAND_OF_PLAYER )
   public void removeAllFromHandOfPlayer (){
   
      PlayerHand tmpValue;
      Iterator<? extends PlayerHand> iter = this.iteratorOfHandOfPlayer ();
      while (iter.hasNext ())
      {
         tmpValue = (PlayerHand) iter.next ();
         this.removeFromHandOfPlayer (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_HAND_OF_PLAYER )
   public boolean hasInHandOfPlayer (PlayerHand value)
   {
      return ((this.handOfPlayer != null) &&
              (value != null) &&
              this.handOfPlayer.contains (value));
   }

   @Property( name = PROPERTY_HAND_OF_PLAYER )
   public Iterator<? extends PlayerHand> iteratorOfHandOfPlayer ()
   {
      return ((this.handOfPlayer == null)
              ? FEmptyIterator.<PlayerHand>get ()
              : this.handOfPlayer.iterator ());
   }

   @Property( name = PROPERTY_HAND_OF_PLAYER )
   public int sizeOfHandOfPlayer ()
   {
      return ((this.handOfPlayer == null)
              ? 0
              : this.handOfPlayer.size ());
   }

   /**
    * <pre>
    *           0..1     has     0..1
    * MauMau ------------------------- TopOfPile
    *           mauMau               pile
    * </pre>
    */
   public static final String PROPERTY_PILE = "pile";

   @Property( name = PROPERTY_PILE, partner = TopOfPile.PROPERTY_MAU_MAU, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private TopOfPile pile;

   @Property( name = PROPERTY_PILE )
   public boolean setPile (TopOfPile value)
   {
      boolean changed = false;

      if (this.pile != value)
      {
      
         TopOfPile oldValue = this.pile;
         MauMau source = this;
         if (this.pile != null)
         {
            this.pile = null;
            oldValue.setMauMau (null);
         }
         this.pile = value;

         if (value != null)
         {
            value.setMauMau (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PILE )
   public MauMau withPile (TopOfPile value)
   {
      setPile (value);
      return this;
   }

   public TopOfPile getPile ()
   {
      return this.pile;
   }

   /**
    * <pre>
    *           0..1     plays     0..n
    * MauMau ------------------------- Player
    *           mauMau               player
    * </pre>
    */
   public static final String PROPERTY_PLAYER = "player";

   @Property( name = PROPERTY_PLAYER, partner = Player.PROPERTY_MAU_MAU, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashSet<Player> player;

   @Property( name = PROPERTY_PLAYER )
   public Set<? extends Player> getPlayer()
   {
      return ((this.player == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.player));
   }

   @Property( name = PROPERTY_PLAYER )
   public boolean addToPlayer (Player value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.player == null)
         {
            this.player = new FHashSet<Player> ();

         }
      
         changed = this.player.add (value);
         if (changed)
         {
            value.setMauMau (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PLAYER )
   public MauMau withPlayer (Player value)
   {
      addToPlayer (value);
      return this;
   }

   public MauMau withoutPlayer (Player value)
   {
      removeFromPlayer (value);
      return this;
   }


   public boolean removeFromPlayer (Player value)
   {
      boolean changed = false;

      if ((this.player != null) && (value != null))
      {
      
         changed = this.player.remove (value);
         if (changed)
         {
            value.setMauMau (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PLAYER )
   public void removeAllFromPlayer (){
   
      Player tmpValue;
      Iterator<? extends Player> iter = this.iteratorOfPlayer ();
      while (iter.hasNext ())
      {
         tmpValue = (Player) iter.next ();
         this.removeFromPlayer (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_PLAYER )
   public boolean hasInPlayer (Player value)
   {
      return ((this.player != null) &&
              (value != null) &&
              this.player.contains (value));
   }

   @Property( name = PROPERTY_PLAYER )
   public Iterator<? extends Player> iteratorOfPlayer ()
   {
      return ((this.player == null)
              ? FEmptyIterator.<Player>get ()
              : this.player.iterator ());
   }

   @Property( name = PROPERTY_PLAYER )
   public int sizeOfPlayer ()
   {
      return ((this.player == null)
              ? 0
              : this.player.size ());
   }

   public boolean playingCard (Player Dealer )
   {
      boolean fujaba__Success = false;
      Object _TmpObject = null;
      TopOfPile Card = null;
      MauMau NewSuit = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         if ( suit.Card:PlayerHand==suit.Card.TopOfPile. )
         {
         ;
         }
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( true )
      {
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // check link removed from Card to Card
            JavaSDM.ensure (Card.equals (Card.getCard2 ()));

            // destroy link removed from Card to Card
            Card.setCard2 (null);
            // create link is from Card to Card
            Card.setCard (Card);

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         return true;

      }
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         if ( number.Card.TopOfPile=="7" )
         {
         ;
         }
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( true )
      {
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // check link taken from deck from Card to Card
            JavaSDM.ensure (Card.equals (Card.getTaken from deck ()));

            // destroy link taken from deck from Card to Card
            Card.setTaken from deck (null);
            // create link will be dealt from Card to Card
            Card.setWill be dealt (Card);

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // check link taken from deck from Card to Card
            JavaSDM.ensure (Card.equals (Card.getTaken from deck ()));

            // destroy link taken from deck from Card to Card
            Card.setTaken from deck (null);
            // create link will be dealt from Card to Card
            Card.setWill be dealt (Card);

            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         return false;

      }
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         if ( number.Card.TopOfPile=="8" )
         {
         ;
         }
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( true )
      {
         return false;

      }
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         if ( number.Card.TopOfPile=="Jack" )
         {
         ;
         }
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( true )
      {
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            _TmpObject = Suit;

            // ensure correct type and really bound of object Card
            JavaSDM.ensure ( _TmpObject instanceof TopOfPile );
            Card = (TopOfPile) _TmpObject;

            // search to-one link has from Card to NewSuit
            NewSuit = Card.getMauMau ();

            // check object NewSuit is really bound
            JavaSDM.ensure ( NewSuit != null );

            // check isomorphic binding between objects this and NewSuit
            JavaSDM.ensure ( !this.equals (NewSuit) );


            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         return false;

      }
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // check link taken from deck from Card to Card
         JavaSDM.ensure (Card.equals (Card.getTaken from deck ()));

         // destroy link taken from deck from Card to Card
         Card.setTaken from deck (null);
         // create link will be dealt from Card to Card
         Card.setWill be dealt (Card);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return false;
   }

   public void removeYou()
   {
      this.removeAllFromCard ();
      this.setDeck (null);
      this.removeAllFromHandOfPlayer ();
      this.setPile (null);
      this.removeAllFromPlayer ();
   }
}


