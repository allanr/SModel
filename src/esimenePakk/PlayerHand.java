/*
 * generated by Fujaba - CodeGen2
 */
package esimenePakk;
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath


public class PlayerHand
{



   public static final String PROPERTY_NUMBER = "Number";

   @Property( name = PROPERTY_NUMBER, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private int Number;

   @Property( name = PROPERTY_NUMBER )
   public void setNumber (int value)
   {
      this.Number = value;
   }

   public PlayerHand withNumber (int value)
   {
      setNumber (value);
      return this;
   }

   @Property( name = PROPERTY_NUMBER )
   public int getNumber ()
   {
      return this.Number;
   }

   public static final String PROPERTY_SUIT = "Suit";

   @Property( name = PROPERTY_SUIT, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private String Suit;

   @Property( name = PROPERTY_SUIT )
   public void setSuit (String value)
   {
      this.Suit = value;
   }

   public PlayerHand withSuit (String value)
   {
      setSuit (value);
      return this;
   }

   @Property( name = PROPERTY_SUIT )
   public String getSuit ()
   {
      return this.Suit;
   }

   /**
    * <pre>
    *           0..1     removed     0..1
    * PlayerHand ------------------------- Card
    *           removed               card2
    * </pre>
    */
   public static final String PROPERTY_CARD2 = "card2";

   @Property( name = PROPERTY_CARD2, partner = Card.PROPERTY_REMOVED, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card card2;

   @Property( name = PROPERTY_CARD2 )
   public boolean setCard2 (Card value)
   {
      boolean changed = false;

      if (this.card2 != value)
      {
      
         Card oldValue = this.card2;
         PlayerHand source = this;
         if (this.card2 != null)
         {
            this.card2 = null;
            oldValue.setRemoved (null);
         }
         this.card2 = value;

         if (value != null)
         {
            value.setRemoved (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CARD2 )
   public PlayerHand withCard2 (Card value)
   {
      setCard2 (value);
      return this;
   }

   public Card getCard2 ()
   {
      return this.card2;
   }

   /**
    * <pre>
    *           0..1     will be dealt     0..1
    * PlayerHand ------------------------- Card
    *           will be dealt               card
    * </pre>
    */
   public static final String PROPERTY_CARD = "card";

   @Property( name = PROPERTY_CARD, partner = Card.PROPERTY_WILL BE DEALT, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card card;

   @Property( name = PROPERTY_CARD )
   public boolean setCard (Card value)
   {
      boolean changed = false;

      if (this.card != value)
      {
      
         Card oldValue = this.card;
         PlayerHand source = this;
         if (this.card != null)
         {
            this.card = null;
            oldValue.setWill be dealt (null);
         }
         this.card = value;

         if (value != null)
         {
            value.setWill be dealt (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CARD )
   public PlayerHand withCard (Card value)
   {
      setCard (value);
      return this;
   }

   public Card getCard ()
   {
      return this.card;
   }

   public static final String PROPERTY_PLAYER_NAME = "playerName";

   @Property( name = PROPERTY_PLAYER_NAME, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private String playerName;

   @Property( name = PROPERTY_PLAYER_NAME )
   public void setPlayerName (String value)
   {
      this.playerName = value;
   }

   public PlayerHand withPlayerName (String value)
   {
      setPlayerName (value);
      return this;
   }

   @Property( name = PROPERTY_PLAYER_NAME )
   public String getPlayerName ()
   {
      return this.playerName;
   }

   /**
    * <pre>
    *           0..n     has     0..1
    * PlayerHand ------------------------- MauMau
    *           handOfPlayer               player
    * </pre>
    */
   public static final String PROPERTY_PLAYER = "player";

   @Property( name = PROPERTY_PLAYER, partner = MauMau.PROPERTY_HAND_OF_PLAYER, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private MauMau player;

   @Property( name = PROPERTY_PLAYER )
   public boolean setPlayer (MauMau value)
   {
      boolean changed = false;

      if (this.player != value)
      {
      
         MauMau oldValue = this.player;
         PlayerHand source = this;
         if (this.player != null)
         {
            this.player = null;
            oldValue.removeFromHandOfPlayer (this);
         }
         this.player = value;

         if (value != null)
         {
            value.addToHandOfPlayer (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PLAYER )
   public PlayerHand withPlayer (MauMau value)
   {
      setPlayer (value);
      return this;
   }

   public MauMau getPlayer ()
   {
      return this.player;
   }

   public void removeYou()
   {
      this.setCard2 (null);
      this.setCard (null);
      this.setPlayer (null);
   }
}


