/*
 * generated by Fujaba - CodeGen2
 */
package esimenePakk;
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import java.util.*;
import de.upb.tools.fca.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath


public class Card
{



   public static final String PROPERTY_NUMBER = "Number";

   @Property( name = PROPERTY_NUMBER, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private String Number;

   @Property( name = PROPERTY_NUMBER )
   public void setNumber (String value)
   {
      this.Number = value;
   }

   public Card withNumber (String value)
   {
      setNumber (value);
      return this;
   }

   @Property( name = PROPERTY_NUMBER )
   public String getNumber ()
   {
      return this.Number;
   }

   public static final String PROPERTY_SUIT = "Suit";

   @Property( name = PROPERTY_SUIT, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private String Suit;

   @Property( name = PROPERTY_SUIT )
   public void setSuit (String value)
   {
      this.Suit = value;
   }

   public Card withSuit (String value)
   {
      setSuit (value);
      return this;
   }

   @Property( name = PROPERTY_SUIT )
   public String getSuit ()
   {
      return this.Suit;
   }

   /**
    * <pre>
    *           0..1     is     0..n
    * Card ------------------------- TopOfPile
    *           card               is
    * </pre>
    */
   public static final String PROPERTY_IS = "is";

   @Property( name = PROPERTY_IS, partner = TopOfPile.PROPERTY_CARD, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashSet<TopOfPile> is;

   @Property( name = PROPERTY_IS )
   public Set<? extends TopOfPile> getIs()
   {
      return ((this.is == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.is));
   }

   @Property( name = PROPERTY_IS )
   public boolean addToIs (TopOfPile value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.is == null)
         {
            this.is = new FHashSet<TopOfPile> ();

         }
      
         changed = this.is.add (value);
         if (changed)
         {
            value.setCard (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_IS )
   public Card withIs (TopOfPile value)
   {
      addToIs (value);
      return this;
   }

   public Card withoutIs (TopOfPile value)
   {
      removeFromIs (value);
      return this;
   }


   public boolean removeFromIs (TopOfPile value)
   {
      boolean changed = false;

      if ((this.is != null) && (value != null))
      {
      
         changed = this.is.remove (value);
         if (changed)
         {
            value.setCard (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_IS )
   public void removeAllFromIs (){
   
      TopOfPile tmpValue;
      Iterator<? extends TopOfPile> iter = this.iteratorOfIs ();
      while (iter.hasNext ())
      {
         tmpValue = (TopOfPile) iter.next ();
         this.removeFromIs (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_IS )
   public boolean hasInIs (TopOfPile value)
   {
      return ((this.is != null) &&
              (value != null) &&
              this.is.contains (value));
   }

   @Property( name = PROPERTY_IS )
   public Iterator<? extends TopOfPile> iteratorOfIs ()
   {
      return ((this.is == null)
              ? FEmptyIterator.<TopOfPile>get ()
              : this.is.iterator ());
   }

   @Property( name = PROPERTY_IS )
   public int sizeOfIs ()
   {
      return ((this.is == null)
              ? 0
              : this.is.size ());
   }

   /**
    * <pre>
    *           0..n     is in     0..1
    * Card ------------------------- MauMau
    *           card               pile
    * </pre>
    */
   public static final String PROPERTY_PILE = "pile";

   @Property( name = PROPERTY_PILE, partner = MauMau.PROPERTY_CARD, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private MauMau pile;

   @Property( name = PROPERTY_PILE )
   public boolean setPile (MauMau value)
   {
      boolean changed = false;

      if (this.pile != value)
      {
      
         MauMau oldValue = this.pile;
         Card source = this;
         if (this.pile != null)
         {
            this.pile = null;
            oldValue.removeFromCard (this);
         }
         this.pile = value;

         if (value != null)
         {
            value.addToCard (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PILE )
   public Card withPile (MauMau value)
   {
      setPile (value);
      return this;
   }

   public MauMau getPile ()
   {
      return this.pile;
   }

   /**
    * <pre>
    *           0..1     removed     0..1
    * Card ------------------------- PlayerHand
    *           card2               removed
    * </pre>
    */
   public static final String PROPERTY_REMOVED = "removed";

   @Property( name = PROPERTY_REMOVED, partner = PlayerHand.PROPERTY_CARD2, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private PlayerHand removed;

   @Property( name = PROPERTY_REMOVED )
   public boolean setRemoved (PlayerHand value)
   {
      boolean changed = false;

      if (this.removed != value)
      {
      
         PlayerHand oldValue = this.removed;
         Card source = this;
         if (this.removed != null)
         {
            this.removed = null;
            oldValue.setCard2 (null);
         }
         this.removed = value;

         if (value != null)
         {
            value.setCard2 (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_REMOVED )
   public Card withRemoved (PlayerHand value)
   {
      setRemoved (value);
      return this;
   }

   public PlayerHand getRemoved ()
   {
      return this.removed;
   }

   /**
    * <pre>
    *           0..1     taken from deck     0..1
    * Card ------------------------- Deck
    *           card               taken from deck
    * </pre>
    */
   public static final String PROPERTY_TAKEN FROM DECK = "taken from deck";

   @Property( name = PROPERTY_TAKEN FROM DECK, partner = Deck.PROPERTY_CARD, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Deck taken from deck;

   @Property( name = PROPERTY_TAKEN FROM DECK )
   public boolean setTaken from deck (Deck value)
   {
      boolean changed = false;

      if (this.taken from deck != value)
      {
      
         Deck oldValue = this.taken from deck;
         Card source = this;
         if (this.taken from deck != null)
         {
            this.taken from deck = null;
            oldValue.setCard (null);
         }
         this.taken from deck = value;

         if (value != null)
         {
            value.setCard (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TAKEN FROM DECK )
   public Card withTaken from deck (Deck value)
   {
      setTaken from deck (value);
      return this;
   }

   public Deck getTaken from deck ()
   {
      return this.taken from deck;
   }

   /**
    * <pre>
    *           0..1     will be dealt     0..1
    * Card ------------------------- PlayerHand
    *           card               will be dealt
    * </pre>
    */
   public static final String PROPERTY_WILL BE DEALT = "will be dealt";

   @Property( name = PROPERTY_WILL BE DEALT, partner = PlayerHand.PROPERTY_CARD, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private PlayerHand will be dealt;

   @Property( name = PROPERTY_WILL BE DEALT )
   public boolean setWill be dealt (PlayerHand value)
   {
      boolean changed = false;

      if (this.will be dealt != value)
      {
      
         PlayerHand oldValue = this.will be dealt;
         Card source = this;
         if (this.will be dealt != null)
         {
            this.will be dealt = null;
            oldValue.setCard (null);
         }
         this.will be dealt = value;

         if (value != null)
         {
            value.setCard (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_WILL BE DEALT )
   public Card withWill be dealt (PlayerHand value)
   {
      setWill be dealt (value);
      return this;
   }

   public PlayerHand getWill be dealt ()
   {
      return this.will be dealt;
   }

   public void removeYou()
   {
      this.removeAllFromIs ();
      this.setPile (null);
      this.setRemoved (null);
      this.setTaken from deck (null);
      this.setWill be dealt (null);
   }
}


