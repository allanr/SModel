/*
 * generated by Fujaba - CodeGen2
 */
import de.upb.tools.sdm.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import java.util.*;
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.upb.tools.fca.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath


public class Pit
{



   public int countSeeds ()
   {
      boolean fujaba__Success = false;
      int seeds = 0;
      Iterator fujaba__IterThisToSeed = null;
      Seed seed = null;

      // // init seed counter
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         seeds = 0;
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      // // go through every seed which is related with this pit
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // iterate to-many link has seeds from this to seed
         fujaba__Success = false;
         fujaba__IterThisToSeed = this.iteratorOfSeed ();

         while ( fujaba__IterThisToSeed.hasNext () )
         {
            try
            {
               seed = (Seed) fujaba__IterThisToSeed.next ();

               // check object seed is really bound
               JavaSDM.ensure ( seed != null );
               // // add new seed into seed counter
               // story pattern storypatternwiththis
               try 
               {
                  fujaba__Success = false; 

                  // collabStat call
                  seeds = seeds + 1;
                  fujaba__Success = true;
               }
               catch ( JavaSDMException fujaba__InternalException )
               {
                  fujaba__Success = false;
               }


               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return seeds;
   }

   /**
    * <pre>
    *           0..1     next     0..1
    * Pit ------------------------- Pit
    *           pit               pit
    * </pre>
    */
   public static final String PROPERTY_PIT = "pit";

   @Property( name = PROPERTY_PIT, partner = Pit.PROPERTY_PIT, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Pit pit;

   @Property( name = PROPERTY_PIT )
   public boolean setPit (Pit value)
   {
      boolean changed = false;

      if (this.pit != value)
      {
      
         Pit oldValue = this.pit;
         Pit source = this;
         if (this.pit != null)
         {
            this.pit = null;
            oldValue.setPit (null);
         }
         this.pit = value;

         if (value != null)
         {
            value.setPit (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT )
   public Pit withPit (Pit value)
   {
      setPit (value);
      return this;
   }

   public Pit getPit ()
   {
      return this.pit;
   }

   /**
    * <pre>
    *           0..1     has seeds     0..n
    * Pit ------------------------> Seed
    *           pit               seed
    * </pre>
    */
   public static final String PROPERTY_SEED = "seed";

   @Property( name = PROPERTY_SEED, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashSet<Seed> seed;

   @Property( name = PROPERTY_SEED )
   public Set<? extends Seed> getSeed()
   {
      return ((this.seed == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.seed));
   }

   @Property( name = PROPERTY_SEED )
   public boolean addToSeed (Seed value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.seed == null)
         {
            this.seed = new FHashSet<Seed> ();

         }
      
         changed = this.seed.add (value);
      
      }
      return changed;
   }

   @Property( name = PROPERTY_SEED )
   public Pit withSeed (Seed value)
   {
      addToSeed (value);
      return this;
   }

   public Pit withoutSeed (Seed value)
   {
      removeFromSeed (value);
      return this;
   }


   public boolean removeFromSeed (Seed value)
   {
      boolean changed = false;

      if ((this.seed != null) && (value != null))
      {
      
         changed = this.seed.remove (value);
      
      }
      return changed;
   }

   @Property( name = PROPERTY_SEED )
   public void removeAllFromSeed (){
      if (this.seed != null && this.seed.size () > 0)
      {
      
         this.seed.clear();
      
      }
   }

   @Property( name = PROPERTY_SEED )
   public boolean hasInSeed (Seed value)
   {
      return ((this.seed != null) &&
              (value != null) &&
              this.seed.contains (value));
   }

   @Property( name = PROPERTY_SEED )
   public Iterator<? extends Seed> iteratorOfSeed ()
   {
      return ((this.seed == null)
              ? FEmptyIterator.<Seed>get ()
              : this.seed.iterator ());
   }

   @Property( name = PROPERTY_SEED )
   public int sizeOfSeed ()
   {
      return ((this.seed == null)
              ? 0
              : this.seed.size ());
   }

   /**
    * <pre>
    *           0..1     next to     0..1
    * Pit ------------------------- Store
    *           pit               store
    * </pre>
    */
   public static final String PROPERTY_STORE = "store";

   @Property( name = PROPERTY_STORE, partner = Store.PROPERTY_PIT, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Store store;

   @Property( name = PROPERTY_STORE )
   public boolean setStore (Store value)
   {
      boolean changed = false;

      if (this.store != value)
      {
      
         Store oldValue = this.store;
         Pit source = this;
         if (this.store != null)
         {
            this.store = null;
            oldValue.setPit (null);
         }
         this.store = value;

         if (value != null)
         {
            value.setPit (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_STORE )
   public Pit withStore (Store value)
   {
      setStore (value);
      return this;
   }

   public Store getStore ()
   {
      return this.store;
   }

   public void removeYou()
   {
      this.setPit (null);
      this.removeAllFromSeed ();
      this.setStore (null);
   }
}


